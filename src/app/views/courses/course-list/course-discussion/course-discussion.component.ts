import {Component, OnInit, ViewChild} from '@angular/core';
import {ActivatedRoute, Router} from '@angular/router';
import {PagerService} from '../../../../services/pager.service';
import {ModalDirective} from '../../../../lib/ng-uikit-pro-standard/free/modals';
import {CoursesService} from '../../../../services/courses.service';
import {CookieService} from 'ngx-cookie';
import {UtilsService} from '../../../../services/utils.service';

@Component({
    selector: 'app-courses-course-info',
    templateUrl: './course-discussion.component.html',
    styleUrls: ['./course-discussion.component.scss']
})
export class CourseDiscussionComponent implements OnInit {
    @ViewChild('discussionModal') discussionModal: ModalDirective;
    @ViewChild('addDiscussionModal') addDiscussionModal: ModalDirective;
    items: Array<any> = new Array<any>();
    courseProfile: any;
    courseName: string = '';
    selectedThread: any;
    title: string = '';
    selectedItemIndex: number = 0;
    toRouters: Array<any>;

    constructor(private router: Router,
                private route: ActivatedRoute,
                private pagerService: PagerService,
                private service: CoursesService,
                private utilsService: UtilsService,
                private cookieService: CookieService) {
        const _this = this;
        setInterval(() => {
            if (_this.items.length > 0) {
                _this.autoGenerateDate();
            }
        }, 1);
    }

    get dateDiff() {
        return this.utilsService.dateDiff;
    }

    get timeSpent() {
        return this.utilsService.timeSpent;
    }

    autoGenerateDate() {
        const _this = this;
        this.items.forEach(item => {
            if (item.threadList.length > 0) {
                item.threadList.forEach(thread => {
                    const timeSpentData = _this.utilsService.timeSpent(thread['createOn']);
                    if (timeSpentData.days >= 7) {
                        thread.timeSpent = thread['createOn'];
                        thread.timeSpentMore = '';
                    } else if (timeSpentData.days > 0) {
                        thread.timeSpent = timeSpentData.days;
                        thread.timeSpentMore = (timeSpentData.days > 1) ? 'MESSAGE.days' : 'MESSAGE.day';
                    } else if (timeSpentData.hours > 0) {
                        thread.timeSpent = timeSpentData.hours;
                        thread.timeSpentMore = (timeSpentData.hours > 1) ? 'MESSAGE.hours' : 'MESSAGE.hour';
                    } else {
                        thread.timeSpent = timeSpentData.minutes;
                        thread.timeSpentMore = (timeSpentData.minutes > 1) ? 'MESSAGE.minutes' : 'MESSAGE.minute';
                    }
                });
            }
        });
    }

    ngOnInit() {
        if (this.cookieService.get('toRouters')) {
            this.toRouters = JSON.parse(this.cookieService.get('toRouters'));
        } else if (this.cookieService.get('routLinks')) {
            this.toRouters = JSON.parse(this.cookieService.get('routLinks'));
        } else {
            this.toRouters = [
                {
                    'link': '../../course-list',
                    'display': 'COURSES.LIST'
                },
                {
                    'display': 'Courses.Discussion'
                }
            ];
        }
        if (this.toRouters.length === 4 && this.toRouters[2]['display'] !== 'Courses.Enroll_Left_Users') {
            this.toRouters.splice(this.toRouters.length - 1, 1);
            this.toRouters.forEach(rl => {
               rl['link'] = rl['link'].replace('../', '');
            });
            delete this.toRouters[this.toRouters.length - 1]['link'];
        } else if (this.toRouters.length === 3) {
            if (this.toRouters[1]['display'] !== 'Courses.User_List' && this.toRouters[1]['display'] !== 'Courses.Enroll_Left_Users') {
                this.toRouters.splice(this.toRouters.length - 1, 1);
                this.toRouters.forEach(rl => {
                    rl['link'] = rl['link'].replace('../', '');
                });
                delete this.toRouters[this.toRouters.length - 1]['link'];
            }
        }
        if (this.cookieService.get('courseInfo')) {
            this.courseProfile = JSON.parse(this.cookieService.get('courseInfo'));
            this.courseName = this.courseProfile['courseName'];
            this.service.loadCrsDiscussion({courseSig: this.courseProfile.signature}).subscribe(result => {
                this.items = (result['data']) ? result['data'] : [];
                this.autoGenerateDate();
            });
        }
    }

    get getCreateDateInfo() {
        return this.utilsService.getCreateDateInfo;
    }

    discussionThread(item, thread: any) {
        const opt = { expires: new Date(new Date().getFullYear() + 1, new Date().getMonth(), new Date().getDate()) };
        this.cookieService.put('threadInfo', JSON.stringify({signature: thread.signature, name: thread.title, id: thread.id}), opt);
        const lessonSig = item.signature;
        this.cookieService.put('lessonSig', JSON.stringify({lessonSig: lessonSig}), opt);
        const routLinks = this.toRouters;
        if (routLinks.length > 0) {
            routLinks.forEach(rl => {
               if (rl['link']) {
                   rl['link'] = '../' + rl['link'];
               } else {
                   rl['link'] = '../';
               }
            });
            routLinks.push({display: 'MESSAGE.THREAD'});
        }
        this.cookieService.put('routLinks', JSON.stringify(routLinks), opt);
        this.router.navigate(['courses/course-list/course-discussion/course-discussion-thread']);
    }

    renameDiscussionThread(itemIndex, threadIndex, thread) {
        this.selectedThread = thread;
        this.selectedThread.itemIndex = itemIndex;
        this.selectedThread.threadIndex = threadIndex;
        this.title = this.selectedThread.title;
        this.discussionModal.show();
    }

    updateSelectedThread() {
        const _this = this;
        const data = {
          info: this.title,
          signature: this.selectedThread.signature
        };
        this.service.updateThread(data).subscribe(resp => {
           _this.items[_this.selectedThread.itemIndex].threadList[_this.selectedThread.threadIndex].title = data.info;
        });
    }

    addNewLessonThread(itemIndex) {
        this.selectedItemIndex = itemIndex;
        this.title = this.items[itemIndex].lesson;
        this.addDiscussionModal.show();
    }

    addNewThread() {
        const _this = this;
        const data = {
            title: this.title,
            lessonSig: this.items[this.selectedItemIndex].signature
        };
        this.service.createThreadLesson(data).subscribe(resp => {
            _this.items[_this.selectedItemIndex].threadList.push(resp['data']);
        });
    }
}
