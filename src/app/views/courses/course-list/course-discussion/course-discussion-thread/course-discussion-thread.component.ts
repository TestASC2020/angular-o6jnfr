import {Component, ElementRef, OnInit, ViewChild} from '@angular/core';
import {ActivatedRoute, Router} from '@angular/router';
import {ModalDirective} from '../../../../../lib/ng-uikit-pro-standard/free/modals';
import {UtilsService} from '../../../../../services/utils.service';
import {CookieService} from 'ngx-cookie';
import {CoursesService} from '../../../../../services/courses.service';
import {AbstractControl, FormArray, FormBuilder, FormControl, FormGroup} from '@angular/forms';
import {UserService} from '../../../../../services/user.service';
import {AppState} from '../../../../../app-state.service';
import {ChatService} from '../../../../../services/chat.service';

@Component({
    selector: 'app-courses-course-discussion-thread',
    templateUrl: './course-discussion-thread.component.html',
    styleUrls: ['./course-discussion-thread.component.scss']
})
export class CourseDiscussionThreadComponent implements OnInit {
    @ViewChild('fileInput') fileInput: ElementRef;
    @ViewChild('fileReplyInput') fileReplyInput: ElementRef;
    @ViewChild('fileInputNewMsg') fileInputNewMsg: ElementRef;
    lessonSig: any;
    threadInfo: any;
    userProfile: any;
    selectedLessonThread: string = '';
    selectedLessonThreadMsgCount = 0;
    replyMessageIndex: any;
    threadMessages: Array<any> = new Array<any>();
    discussionList: Array<any> = new Array<any>();
    threadLikeList: Array<any> = new Array<any>();
    isEdit: boolean = false;
    newMessage: string = '';
    replyMessage: string = '';
    fileAttachmentsFormGroups: Array<FormGroup> = new Array<FormGroup>();
    fileReplyAttachmentsFormGroups: Array<Array<FormGroup>> = new Array<Array<FormGroup>>();
    selectedFileIndex: number = 0;
    selectedReplyFileIndexI: number = 0;
    @ViewChild('showImageModal') showImageModal: ModalDirective;
    selectedImages: Array<string> = new Array<string>();
    autoRunIndex: number = 0;
    toRouters: Array<any>;
    filesNewMsg: Array<any> = new Array<any>();
    filesNewReplyMsg: Array<Array<any>> = new Array<Array<any>>();

    constructor(private router: Router,
                private route: ActivatedRoute,
                private utilsService: UtilsService,
                private cookieService: CookieService,
                private formBuilder: FormBuilder,
                private service: CoursesService,
                private appState: AppState,
                private chatService: ChatService,
                private userService: UserService) {
        const _this = this;
        setInterval(() => {
            if (_this.threadMessages.length > 0) {
                _this.autoGenerateDate();
            }
        }, 1);
        // Auto slider images in 3 seconds - right hand direction
        setInterval(() => {
            if (_this.selectedImages.length > 0) {
                _this.addUpdateRunIndex(1);
            }
        }, 3000);
    }

    autoGenerateDate() {
        const _this = this;
        if (this.threadMessages.length > 0) {
            this.threadMessages.forEach(threadMessage => {
                if (threadMessage) {
                    const timeSpentData = _this.utilsService.timeSpent(threadMessage['createOn']);
                    if (timeSpentData.days >= 7) {
                        threadMessage.timeSpent = threadMessage['createOn'];
                        threadMessage.timeSpentMore = '';
                    } else if (timeSpentData.days > 0) {
                        threadMessage.timeSpent = timeSpentData.days;
                        threadMessage.timeSpentMore = (timeSpentData.days > 1) ? 'MESSAGE.days' : 'MESSAGE.day';
                    } else if (timeSpentData.hours > 0) {
                        threadMessage.timeSpent = timeSpentData.hours;
                        threadMessage.timeSpentMore = (timeSpentData.hours > 1) ? 'MESSAGE.hours' : 'MESSAGE.hour';
                    } else {
                        threadMessage.timeSpent = timeSpentData.minutes;
                        threadMessage.timeSpentMore = (timeSpentData.minutes > 1) ? 'MESSAGE.minutes' : 'MESSAGE.minute';
                    }
                }
                if (threadMessage.reply.length > 0) {
                    threadMessage.reply.forEach(replyItem => {
                        if (replyItem) {
                            const timeSpentDataReply = (replyItem['createOn']) ?
                                _this.utilsService.timeSpent(replyItem['createOn']) : null;
                            if (timeSpentDataReply && timeSpentDataReply.days >= 7) {
                                replyItem.timeSpent = replyItem['createOn'];
                                replyItem.timeSpentMore = '';
                            } else if (timeSpentDataReply && timeSpentDataReply.days > 0) {
                                replyItem.timeSpent = timeSpentDataReply.days;
                                replyItem.timeSpentMore = (timeSpentDataReply.days > 1) ? 'MESSAGE.days' : 'MESSAGE.day';
                            } else if (timeSpentDataReply && timeSpentDataReply.hours > 0) {
                                replyItem.timeSpent = timeSpentDataReply.hours;
                                replyItem.timeSpentMore = (timeSpentDataReply.hours > 1) ? 'MESSAGE.hours' : 'MESSAGE.hour';
                            } else if (timeSpentDataReply) {
                                replyItem.timeSpent = timeSpentDataReply.minutes;
                                replyItem.timeSpentMore = (timeSpentDataReply.minutes > 1) ? 'MESSAGE.minutes' : 'MESSAGE.minute';
                            }
                        }
                    });
                }
            });
        }
    }

    get getCreateDateInfo() {
        return this.utilsService.getCreateDateInfo;
    }

    updateThreadInfo($event) {
        const _this = this;
        this.selectedLessonThread = $event.target.value;
        this.selectedLessonThreadMsgCount = this.discussionList[this.discussionList.map(it => it.signature)
            .indexOf(this.selectedLessonThread)].msgCount;
        const data = {
            threadSig: this.selectedLessonThread
        };
        this.service.loadMessage(data).subscribe(resp => {
            this.threadMessages = resp['data'];
            _this.threadLikeList = [];
            _this.fileAttachmentsFormGroups = [];
            _this.fileReplyAttachmentsFormGroups = [];
            _this.filesNewReplyMsg = [];
            for (let i = 0; i < _this.threadMessages.length; i++) {
                const it = _this.threadMessages[i];
                _this.threadLikeList.push({like: true});
                const formGroup: FormGroup = new FormGroup({
                    isEdit: new FormControl({value: false, disabled: 'disabled'}),
                    files: this.formBuilder.array([])
                });
                _this.fileAttachmentsFormGroups.push(formGroup);
                _this.filesNewReplyMsg.push([]);
                _this.initFilesFormArray(it, i);
                _this.fileReplyAttachmentsFormGroups.push([]);
                for (let j = 0; j < it.reply.length; j++) {
                    const itReply = it.reply[j];
                    const replyFormGroup: FormGroup = new FormGroup({
                        isEdit: new FormControl({value: false, disabled: 'disabled'}),
                        files: this.formBuilder.array([])
                    });
                    _this.fileReplyAttachmentsFormGroups[i].push(replyFormGroup);
                    _this.initReplyFilesFormArray(itReply, i, j);
                }
            }
            _this.autoGenerateDate();
        });
    }

    get dateDiff() {
        return this.utilsService.dateDiff;
    }

    get timeSpent() {
        return this.utilsService.timeSpent;
    }

    generateAddressInfo(user) {
        const address = [];
        if (user.city) {
            address.push(user.city);
        }
        if (user.region) {
            address.push(user.region);
        }
        if (user.country) {
            address.push(user.country);
        }
        if (address.length > 0) {
            return address.join(', ');
        }
        return '';
    }

    ngOnInit() {
        const _this = this;
        if (this.cookieService.get('routLinks')) {
            this.toRouters = JSON.parse(this.cookieService.get('routLinks'));
        } else if (this.cookieService.get('toRouters')) {
            this.toRouters = JSON.parse(this.cookieService.get('toRouters'));
        } else {
            this.toRouters = [
                {
                    'link': '../../../course-list',
                    'display': 'COURSES.LIST'
                },
                {
                    'display': 'MESSAGE.THREAD'
                }
            ];
        }
        this.userService.loadUserProfile().subscribe(userData => {
            _this.userProfile = userData['data'];
            if (_this.cookieService.get('lessonSig')) {
                _this.lessonSig = JSON.parse(_this.cookieService.get('lessonSig'));
                _this.discussionList = [];
                this.service.loadThreadLesson({lessonSig: _this.lessonSig.lessonSig}).subscribe(lessonListData => {
                    const temp = lessonListData['data'];
                    temp.forEach(tmp => {
                        const tempItem = {
                            name: tmp.title,
                            id: tmp.id,
                            signature: tmp.signature,
                            msgCount: tmp.msgCount
                        };
                        _this.discussionList.push(tempItem);
                    });
                    if (_this.cookieService.get('threadInfo')) {
                        _this.threadInfo = JSON.parse(_this.cookieService.get('threadInfo'));
                        const dcs = _this.discussionList.map(dc => dc.id);
                        let selectedIndex = dcs.indexOf(this.threadInfo.id);
                        if (selectedIndex < 0) {
                            selectedIndex = 0;
                        }
                        _this.selectedLessonThread = _this.discussionList[selectedIndex].signature;
                        this.selectedLessonThreadMsgCount = _this.discussionList[selectedIndex].msgCount;
                        const data = {
                            threadSig: _this.selectedLessonThread
                        };
                        _this.service.loadMessage(data).subscribe(resp => {
                            _this.threadMessages = resp['data'];
                            _this.generateAllFormData();
                            try {
                                try {
                                    _this.service.getThreadInfo({threadSig: _this.selectedLessonThread}).subscribe(respData => {
                                        try {
                                            _this.chatService.getPermission();
                                            _this.chatService.receiveMessage(respData['data']['collection'], respData['data']['threadId'])
                                                .subscribe(real => {
                                                    if (real) {
                                                        const lastMsgId = real['LastMsgId'];
                                                        const parentId = real['ParentId'];
                                                        _this.service.loadMessageById({msgId: lastMsgId}).subscribe(realMessageData => {
                                                            if (!parentId) {
                                                                if (_this.checkExists( _this.threadMessages, realMessageData['data'])) {
                                                                    const tempIndex =  _this.getIndex(_this.threadMessages, realMessageData['data']);
                                                                    _this.threadMessages[tempIndex] = realMessageData['data'];
                                                                } else {
                                                                    if (realMessageData['data']['threadSignature']) {
                                                                        _this.threadMessages = [realMessageData['data'], ..._this.threadMessages];
                                                                    }
                                                                }
                                                                _this.generateAllFormData();
                                                            } else {
                                                                let replyIndex = 0;
                                                                const parentIndex = _this.threadMessages.indexOf(_this.threadMessages.
                                                                        filter(th => th.id === parentId)[0]);
                                                                if (_this.checkExists( _this.threadMessages[parentIndex]['reply'], realMessageData['data'])) {
                                                                    const tempIndex =  _this.getIndex(_this.threadMessages[parentIndex]['reply'], realMessageData['data']);
                                                                    _this.threadMessages[parentIndex]['reply'][tempIndex] = realMessageData['data'];
                                                                    replyIndex = tempIndex;
                                                                } else {
                                                                    if (realMessageData['data']['threadSignature']) {
                                                                        _this.threadMessages[parentIndex]['reply'] = [realMessageData['data'], ..._this.threadMessages[parentIndex]['reply']];
                                                                        const replyFormGroup: FormGroup = new FormGroup({
                                                                            isEdit: new FormControl({value: false, disabled: 'disabled'}),
                                                                            files: this.formBuilder.array([])
                                                                        });
                                                                        _this.fileReplyAttachmentsFormGroups[parentIndex] = [replyFormGroup, ..._this.fileReplyAttachmentsFormGroups[parentIndex]];
                                                                        replyIndex = 0;
                                                                    }
                                                                }
                                                                _this.initReplyFilesFormArray(realMessageData['data'], parentIndex, replyIndex);
                                                                _this.autoGenerateDate();
                                                                document.getElementById('reply_' + parentIndex).setAttribute('style', 'display: none');
                                                            }
                                                        });
                                                    }
                                                }
                                            );
                                        } catch (e3) {}
                                    });
                                } catch (e2) {}

                            } catch (e) { }
                        });
                    }
                });
            }
        });
    }

    checkExists(arr: Array<any>, item: any): boolean {
        if (arr.map(it => it['id']).indexOf(item['id']) !== -1) {
            return true;
        }
        return false;
    }

    getIndex(arr: Array<any>, item: any): number {
        return arr.map(it => it['id']).indexOf(item['id']);
    }

    updateIsEdit(index: number) {
        for (let i = 0; i < this.fileAttachmentsFormGroups.length; i++) {
            if (i !== index) {
                this.fileAttachmentsFormGroups[i].get('isEdit').setValue(false);
            }
        }
        const status = this.fileAttachmentsFormGroups[index].get('isEdit').value;
        this.fileAttachmentsFormGroups[index].get('isEdit').setValue(!status);
    }

    getIsEdit(index: number) {
        return this.checkAvailble(this.threadMessages[index]) && (this.fileAttachmentsFormGroups[index]) ? this.fileAttachmentsFormGroups[index].get('isEdit').value : false;
    }

    getIsEdit0(index: number) {
        return (this.fileAttachmentsFormGroups[index]) ? this.fileAttachmentsFormGroups[index].get('isEdit').value : false;
    }

    initFilesFormArray(item: any, index: number) {
        const _this = this;
        const ctrls = (<FormArray>_this.fileAttachmentsFormGroups[index].controls['files']).controls;
        if (item.files && item.files.length > 0) {
            item.files.forEach(file => {
                ctrls.push(this.formBuilder.group({
                    fileExt: new FormControl(''),
                    data: new FormControl(''),
                    url: new FormControl(file.url),
                    onLoad: new FormControl(true)
                }));
            });
        }
    }

    updateIsReplyEdit(index: number, replyIndex: number) {
        for (let i = 0; i < this.fileReplyAttachmentsFormGroups[index].length; i++) {
            if (i !== replyIndex) {
                this.fileReplyAttachmentsFormGroups[index][i].get('isEdit').setValue(false);
            }
        }
        const status = this.fileReplyAttachmentsFormGroups[index][replyIndex].get('isEdit').value;
        this.fileReplyAttachmentsFormGroups[index][replyIndex].get('isEdit').setValue(!status);
    }

    getIsReplyEdit(index: number, replyIndex: number) {
        return this.checkAvailble(this.threadMessages[index]['reply'][replyIndex]) && (this.fileReplyAttachmentsFormGroups[index][replyIndex]) ?
            this.fileReplyAttachmentsFormGroups[index][replyIndex].get('isEdit').value : false;
    }

    initReplyFilesFormArray(item: any, index: number, replyIndex: number) {
        const _this = this;
        const ctrls = (<FormArray>_this.fileReplyAttachmentsFormGroups[index][replyIndex].controls['files']).controls;
        // fileReplyAttachmentsFormGroups[index][replyIndex]['controls']['files']['controls']
        if (item.files && item.files.length > 0) {
            item.files.forEach(file => {
                if (!_this.checkFilesExists(ctrls, file)) {
                    ctrls.push(this.formBuilder.group({
                        fileExt: new FormControl(''),
                        data: new FormControl(''),
                        url: new FormControl(file.url),
                        onLoad: new FormControl(true)
                    }));
                }
            });
        }
    }

    checkFilesExists(arr: Array<AbstractControl>, item: any): boolean {
        for (let i = 0; i < arr.length; i++) {
            const fg = arr[i];
            if (fg['controls']['url'].value === item['url']) {
                return true;
            }
        }
        return false;
    }

    addLike(threadMessageIndex: number) {
        const _this = this;
        const data = {
            msgSig: this.threadMessages[threadMessageIndex].signature,
            action: 2
        };
        this.service.addAction(data).subscribe(resp => {
            if (resp['text'].toString().toLowerCase() !== 'ignore') {
                if (_this.threadMessages[threadMessageIndex].actions &&
                    _this.threadMessages[threadMessageIndex].actions.Like !== undefined) {
                    _this.threadMessages[threadMessageIndex].actions.Like = _this.threadMessages[threadMessageIndex].actions.Like + 1;
                } else {
                    _this.threadMessages[threadMessageIndex].actions.Like = 1;
                }
            }
            (document.getElementById('heart_' + threadMessageIndex) as HTMLElement).setAttribute('class', 'fas fa-heart active');
            _this.threadLikeList[threadMessageIndex].like = false;
        });
    }

    addUnLike(threadMessageIndex: number) {
        const _this = this;
        const data = {
            msgSig: this.threadMessages[threadMessageIndex].signature,
            action: 2
        };
        this.service.removeAction(data).subscribe(resp => {
            if (JSON.parse(resp['success'].toString())) {
                if (_this.threadMessages[threadMessageIndex].actions &&
                    _this.threadMessages[threadMessageIndex].actions.Like !== undefined) {
                    _this.threadMessages[threadMessageIndex].actions.Like = _this.threadMessages[threadMessageIndex].actions.Like - 1;
                } else {
                    _this.threadMessages[threadMessageIndex].actions.Like = 0;
                }
            }
            (document.getElementById('heart_' + threadMessageIndex) as HTMLElement).setAttribute('class', 'fas fa-heart');
            _this.threadLikeList[threadMessageIndex].like = true;
        });
    }

    showReply(threadMessageIndex: number) {
        const disp = document.getElementById('reply_' + threadMessageIndex).getAttribute('style');
        if (disp.indexOf('display: block') >= 0) {
            document.getElementById('reply_' + threadMessageIndex).setAttribute('style', 'display: none');
        } else {
            document.getElementById('reply_' + threadMessageIndex).setAttribute('style', 'display: block');
        }
    }

    isOnReply(threadMessageIndex: number) {
        if (document.getElementById('reply_' + threadMessageIndex)) {
            const disp = document.getElementById('reply_' + threadMessageIndex).getAttribute('style');
            if (disp.indexOf('display: block') >= 0) {
                return true;
            }
        }
        return false;
    }

    addNewFile() {
        this.fileInputNewMsg.nativeElement.click();
    }

    previewFileNewMsg($event) {
        const _this = this;
        this.filesNewMsg = new Array<any>();
        for (let i = 0; i < $event.target.files.length; i++) {
            const file: File = $event.target.files[i];
            const reader: FileReader = new FileReader();
            if (file) {
                reader.onloadend = function(e) {
                    if (e.target && e.target['result']) {
                        const ext = file.name.split('.');
                        const data = {
                            data: e.target['result'].split(',')[1],
                            fileExt: '.' + ext[ext.length - 1],
                            msgSig: _this.threadMessages[_this.selectedFileIndex].signature
                        };
                        _this.filesNewMsg.push({
                            fileExt: '.' + ext[ext.length - 1],
                            data: e.target['result'].split(',')[1],
                            url: e.target['result']
                        });
                    }
                };
                reader.readAsDataURL(file);
            }
        }
        this.fileInputNewMsg.nativeElement.value = '';
    }

    addNewRepyFile(index: number) {
        this.selectedReplyFileIndexI = index;
        document.getElementById('fileInputNewReplyMsg_' + index).click();
    }

    previewFileNewReplyMsg(threadIndex, $event) {
        const _this = this;
        this.filesNewReplyMsg[threadIndex] = [];
        for (let i = 0; i < $event.target.files.length; i++) {
            const file: File = $event.target.files[i];
            const reader: FileReader = new FileReader();
            if (file) {
                reader.onloadend = function(e) {
                    if (e.target && e.target['result']) {
                        const ext = file.name.split('.');
                        const data = {
                            data: e.target['result'].split(',')[1],
                            fileExt: '.' + ext[ext.length - 1],
                            msgSig: _this.threadMessages[_this.selectedFileIndex].signature
                        };
                        _this.filesNewReplyMsg[threadIndex].push({
                            fileExt: '.' + ext[ext.length - 1],
                            data: e.target['result'].split(',')[1],
                            url: e.target['result']
                        });
                    }
                };
                reader.readAsDataURL(file);
            }
        }
        (document.getElementById('fileInputNewReplyMsg_' + threadIndex) as HTMLInputElement).value = '';
    }

    showImage(i, j) {
        this.selectedImages = [];
        const imagesControl = this.fileAttachmentsFormGroups[i]['controls']['files']['controls'];
        for (let k = 0; k < imagesControl.length; k++) {
            const imageURL = (this.fileAttachmentsFormGroups[i]['controls']['files']['controls'][k].get('url').value) ?
                this.fileAttachmentsFormGroups[i]['controls']['files']['controls'][k].
                get('url').value : '../../../../../../assets/img/user-avatar.png';
            this.selectedImages.push(imageURL);
        }
        this.autoRunIndex = j;
        this.showImageModal.show();
    }

    showReplyImage(i, j, u) {
        this.selectedImages = [];
        const imagesControl = this.fileReplyAttachmentsFormGroups[i][j]['controls']['files']['controls'];
        for (let k = 0; k < imagesControl.length; k++) {
            const imageURL = (this.fileReplyAttachmentsFormGroups[i][j]['controls']['files']['controls'][k].get('url').value) ?
                this.fileReplyAttachmentsFormGroups[i][j]['controls']['files']['controls'][k].
                get('url').value : '../../../../../../assets/img/user-avatar.png';
            this.selectedImages.push(imageURL);
        }
        this.autoRunIndex = u;
        this.showImageModal.show();
    }

    addUpdateRunIndex(delta: number) {
        this.autoRunIndex += delta;
        if (this.autoRunIndex === -1) {
            this.autoRunIndex = this.selectedImages.length - 1;
        }
        if (this.autoRunIndex === this.selectedImages.length) {
            this.autoRunIndex = 0;
        }
    }

    onKey($event) {
        const _this = this;
        if ($event.keyCode === 13) {
            const data = {
                msg: _this.newMessage,
                threadSig: this.selectedLessonThread
            };
            if (_this.filesNewMsg.length > 0) {
                data['files'] = [];
                for (let i = 0; i < _this.filesNewMsg.length; i++) {
                    data['files'].push({
                        fileExt: _this.filesNewMsg[i].fileExt
                    });
                }
            }
            this.service.addMessage(data).subscribe(resp => {
                if (resp['success'] === true) {
                    _this.newMessage = '';
                    if (_this.filesNewMsg.length > 0 && resp['data']['files'].length === _this.filesNewMsg.length) {
                        for (let i = 0; i < _this.filesNewMsg.length; i++) {
                            resp['data']['files'][i].url = _this.filesNewMsg[i].url;
                            const data2 = {
                                data: _this.filesNewMsg[i].data,
                                fileExt: _this.filesNewMsg[i].fileExt,
                                signature: resp['data']['files'][i].signature,
                                msgSig: resp['data'].signature
                            };
                            _this.service.addFile(data2).subscribe(resp3 => {
                            });
                        }
                    }
                    if (!this.checkExists(_this.threadMessages, resp['data'])) {
                        this.threadMessages = [resp['data'], ..._this.threadMessages];
                    } else {
                        const index = _this.getIndex(this.threadMessages, resp['data']);
                        if (index !== -1) {
                            this.threadMessages[index] = resp['data'];
                        }
                    }
                    _this.generateAllFormData();
                }
            });
        }
    }

    createNewThreadLesson() {
        const _this = this;
        const data = {
            msg: _this.newMessage,
            threadSig: this.selectedLessonThread
        };
        if (_this.filesNewMsg.length > 0) {
            data['files'] = [];
            for (let i = 0; i < _this.filesNewMsg.length; i++) {
                data['files'].push({
                    fileExt: _this.filesNewMsg[i].fileExt
                });
            }
        }
        this.service.addMessage(data).subscribe(resp => {
            if (resp['success'] === true) {
                _this.newMessage = '';
                if (_this.filesNewMsg.length > 0 && resp['data']['files'].length === _this.filesNewMsg.length) {
                    for (let i = 0; i < _this.filesNewMsg.length; i++) {
                        resp['data']['files'][i].url = _this.filesNewMsg[i].url;
                        const data2 = {
                            data: _this.filesNewMsg[i].data,
                            fileExt: _this.filesNewMsg[i].fileExt,
                            signature: resp['data']['files'][i].signature,
                            msgSig: resp['data'].signature
                        };
                        _this.service.addFile(data2).subscribe(resp3 => {
                        });
                    }
                }
                if (!this.checkExists(_this.threadMessages, resp['data'])) {
                    this.threadMessages = [resp['data'], ..._this.threadMessages];
                } else {
                    const index = _this.getIndex(this.threadMessages, resp['data']);
                    if (index !== -1) {
                        this.threadMessages[index] = resp['data'];
                    }
                }
                _this.generateAllFormData();
            }
        });
    }

    onKey2(threadMessageIndex: number, $event) {
        const _this = this;
        if ($event.keyCode === 13) {
            const data = {
                msgSig: _this.threadMessages[threadMessageIndex].signature,
                msg: _this.replyMessage
            };
            if (_this.filesNewReplyMsg[threadMessageIndex].length > 0) {
                data['files'] = [];
                for (let i = 0; i < _this.filesNewReplyMsg[threadMessageIndex].length; i++) {
                    data['files'].push({
                        fileExt: _this.filesNewReplyMsg[threadMessageIndex][i].fileExt
                    });
                }
            }
            this.service.addReply(data).subscribe(resp => {
                if (resp['success'] === true) {
                    _this.replyMessage = '';
                    if (_this.filesNewReplyMsg[threadMessageIndex].length > 0 && resp['data']['files'].length === _this.filesNewReplyMsg[threadMessageIndex].length) {
                        for (let i = 0; i < _this.filesNewReplyMsg[threadMessageIndex].length; i++) {
                            resp['data']['files'][i].url = _this.filesNewReplyMsg[threadMessageIndex][i].url;
                            const data2 = {
                                data: _this.filesNewReplyMsg[threadMessageIndex][i].data,
                                fileExt: _this.filesNewReplyMsg[threadMessageIndex][i].fileExt,
                                signature: resp['data']['files'][i].signature,
                                msgSig: resp['data'].signature
                            };
                            _this.service.addFile(data2).subscribe(resp3 => {
                            });
                        }
                    }
                    document.getElementById('reply_' + threadMessageIndex).setAttribute('style', 'display: none');
                }
            });
        }
    }

    createReplyThreadLesson(threadMessageIndex: number) {
        const _this = this;
        this.replyMessageIndex = threadMessageIndex;
        const data = {
            msgSig: _this.threadMessages[threadMessageIndex].signature,
            msg: _this.replyMessage
        };
        if (_this.filesNewReplyMsg[threadMessageIndex].length > 0) {
            data['files'] = [];
            for (let i = 0; i < _this.filesNewReplyMsg[threadMessageIndex].length; i++) {
                data['files'].push({
                    fileExt: _this.filesNewReplyMsg[threadMessageIndex][i].fileExt
                });
            }
        }
        this.service.addReply(data).subscribe(resp => {
            if (resp['success'] === true) {
                _this.replyMessage = '';
                if (_this.filesNewReplyMsg[threadMessageIndex].length > 0 && resp['data']['files'].length === _this.filesNewReplyMsg[threadMessageIndex].length) {
                    for (let i = 0; i < _this.filesNewReplyMsg[threadMessageIndex].length; i++) {
                        resp['data']['files'][i].url = _this.filesNewReplyMsg[threadMessageIndex][i].url;
                        const data2 = {
                            data: _this.filesNewReplyMsg[threadMessageIndex][i].data,
                            fileExt: _this.filesNewReplyMsg[threadMessageIndex][i].fileExt,
                            signature: resp['data']['files'][i].signature,
                            msgSig: resp['data'].signature
                        };
                        _this.service.addFile(data2).subscribe(resp3 => {
                        });
                    }
                }
                document.getElementById('reply_' + threadMessageIndex).setAttribute('style', 'display: none');
            }
        });
    }

    changeThreadMessage(threadMessageIndex, $event) {
        const _this = this;
        const message = document.getElementById('threadMessage_' + threadMessageIndex) as HTMLInputElement;
        if ($event.keyCode === 13) {
            const data = {
                info: $event.target.value,
                signature: _this.threadMessages[threadMessageIndex].signature
            };
            this.service.updateMsg(data).subscribe(resp => {
                _this.threadMessages[threadMessageIndex].msg = data.info;
                message.value = '';
                _this.updateIsEdit(threadMessageIndex);
            });
        }
    }

    changeThreadMessageName(threadMessageIndex) {
        const _this = this;
        const message = document.getElementById('threadMessage_' + threadMessageIndex) as HTMLInputElement;
        const data = {
            info: message.value,
            signature: _this.threadMessages[threadMessageIndex].signature.toString()
        };
        this.service.updateMsg(data).subscribe(resp => {
            _this.threadMessages[threadMessageIndex].msg = data.info;
            message.value = '';
            _this.updateIsEdit(threadMessageIndex);
        });
    }

    changeThreadReplyMessage(threadMessageIndex, replyIndex, $event) {
        const _this = this;
        const message = document.getElementById('threadReplyMessage_' + threadMessageIndex + '_' + replyIndex) as HTMLInputElement;
        if ($event.keyCode === 13) {
            const data = {
                info: $event.target.value,
                signature: _this.threadMessages[threadMessageIndex].reply[replyIndex].signature
            };
            this.service.updateMsg(data).subscribe(resp => {
                _this.threadMessages[threadMessageIndex].reply[replyIndex].msg = data.info;
                message.value = '';
                _this.updateIsReplyEdit(threadMessageIndex, replyIndex);
            });
        }
    }

    changeThreadReplyMessageName(threadMessageIndex, replyIndex) {
        const _this = this;
        const message = document.getElementById('threadReplyMessage_' + threadMessageIndex + '_' + replyIndex) as HTMLInputElement;
        const data = {
            info: message.value,
            signature: _this.threadMessages[threadMessageIndex].reply[replyIndex].signature
        };
        this.service.updateMsg(data).subscribe(resp => {
            _this.threadMessages[threadMessageIndex].reply[replyIndex].msg = data.info;
            message.value = '';
            _this.updateIsReplyEdit(threadMessageIndex, replyIndex);
        });
    }

    loadMoreReply(messageIndex: number, replyIndex: number) {
        const _this = this;
        const data = {
            msgSig: this.threadMessages[messageIndex].signature,
            fromMsgSig: this.threadMessages[messageIndex].reply[replyIndex].signature
        };
        this.service.loadReply(data).subscribe(resp => {
            if (resp['data'].length > 0) {
                resp['data'].forEach(rs => {
                    _this.threadMessages[messageIndex].reply = [rs, ..._this.threadMessages[messageIndex].reply];
                });
            }
            _this.fileReplyAttachmentsFormGroups[messageIndex] = [];
            for (let j = 0; j < _this.threadMessages[messageIndex].reply.length; j++) {
                const itReply = _this.threadMessages[messageIndex].reply[j];
                const replyFormGroup: FormGroup = new FormGroup({
                    isEdit: new FormControl({value: false, disabled: 'disabled'}),
                    files: this.formBuilder.array([])
                });
                _this.fileReplyAttachmentsFormGroups[messageIndex].push(replyFormGroup);
                _this.initReplyFilesFormArray(itReply, messageIndex, j);
            }
        });
    }

    loadMoreMessage() {
        const messageIndex: number = this.threadMessages.length - 1;
        const _this = this;
        const data = {
            threadSig: this.selectedLessonThread,
            fromMsgSig: this.threadMessages[messageIndex].signature
        };
        this.service.loadMessage(data).subscribe(resp => {
            if (resp['data'].length > 0) {
                resp['data'].forEach(rs => {
                    _this.threadMessages = [rs, ..._this.threadMessages];
                    const it = rs;
                    _this.threadLikeList.push({like: true});
                    const formGroup: FormGroup = new FormGroup({
                        isEdit: new FormControl({value: false, disabled: 'disabled'}),
                        files: this.formBuilder.array([])
                    });
                    _this.fileAttachmentsFormGroups.push(formGroup);
                    _this.initFilesFormArray(it, _this.threadMessages.length - 1);
                    _this.fileReplyAttachmentsFormGroups.push([]);
                    for (let j = 0; j < it.reply.length; j++) {
                        const itReply = it.reply[j];
                        const replyFormGroup: FormGroup = new FormGroup({
                            isEdit: new FormControl({value: false, disabled: 'disabled'}),
                            files: this.formBuilder.array([])
                        });
                        _this.fileReplyAttachmentsFormGroups[_this.threadMessages.length - 1].push(replyFormGroup);
                        _this.initReplyFilesFormArray(itReply, _this.threadMessages.length - 1, j);
                    }
                    _this.autoGenerateDate();
                });
            }
        });
    }

    checkAvailble(item) {
        const check = this.utilsService.timeSpent(item.createOn);
        if (check.seconds <= 90) {
            return true;
        }
        return false;
    }

    generateAllFormData() {
        const _this = this;
        _this.threadLikeList = [];
        _this.fileAttachmentsFormGroups = [];
        _this.fileReplyAttachmentsFormGroups = [];
        _this.filesNewReplyMsg = [];
        for (let i = 0; i < _this.threadMessages.length; i++) {
            const it = _this.threadMessages[i];
            _this.threadLikeList.push({like: true});
            const formGroup: FormGroup = new FormGroup({
                isEdit: new FormControl({value: false, disabled: 'disabled'}),
                files: this.formBuilder.array([])
            });
            _this.fileAttachmentsFormGroups.push(formGroup);
            _this.filesNewReplyMsg.push([]);
            _this.initFilesFormArray(it, i);
            _this.fileReplyAttachmentsFormGroups.push([]);
            for (let j = 0; j < it.reply.length; j++) {
                const itReply = it.reply[j];
                const replyFormGroup: FormGroup = new FormGroup({
                    isEdit: new FormControl({value: false, disabled: 'disabled'}),
                    files: this.formBuilder.array([])
                });
                _this.fileReplyAttachmentsFormGroups[i] = [replyFormGroup, ..._this.fileReplyAttachmentsFormGroups[i]];
                _this.initReplyFilesFormArray(itReply, i, j);
            }
        }
        _this.autoGenerateDate();
    }
}
